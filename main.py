import os
import json
import asyncio
from datetime import datetime
from typing import List, Dict, Any, Optional
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
import httpx
from packaging.version import parse as vparse, Version
from aiocache import cached, Cache
from aiocache.serializers import JsonSerializer
from dotenv import load_dotenv
from utils.parser import parse_tokens
from rapidfuzz import process
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    BOT_TOKEN: str
    API_BASE: str = 'https://endoflife.date/api/v1'
    TIMEZONE: str = 'Europe/Berlin'
    CACHE_TTL_PRODUCTS: int = 12 * 3600  # 12 —á–∞—Å–æ–≤
    CACHE_TTL_SLUGS: int = 3600  # 1 —á–∞—Å
    LOCALE_PATH: str = 'locales/ru.json'

    @classmethod
    def load(cls) -> None:
        load_dotenv()
        cls.BOT_TOKEN = os.getenv('BOT_TOKEN')
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Config.load()
TZ = pytz.timezone(Config.TIMEZONE)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
try:
    with open(Config.LOCALE_PATH, encoding='utf-8') as f:
        L = json.load(f)
except (FileNotFoundError, json.JSONDecodeError) as e:
    raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

@cached(ttl=Config.CACHE_TTL_PRODUCTS, cache=Cache.MEMORY, serializer=JsonSerializer())
async def get_slugs() -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{Config.API_BASE}/products.json")
            response.raise_for_status()
            items = response.json()
            return [it['slug'] for it in items]
        except (httpx.HTTPError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")

@cached(ttl=Config.CACHE_TTL_SLUGS, cache=Cache.MEMORY, serializer=JsonSerializer())
async def fetch_product(slug: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ."""
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{Config.API_BASE}/products/{slug}.json")
            response.raise_for_status()
            return response.json()
        except (httpx.HTTPError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ {slug}: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ {slug}: {e}")

async def compute_info(name: str, version: Optional[str]) -> str:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ EOL –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
    –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä—ë—Ç —Å–∞–º—É—é —Å–≤–µ–∂—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é.
    """
    try:
        data = await fetch_product(name)
        today = datetime.now(TZ).date()
        # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä—ë–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é
        if not version:
            active = [r for r in data if datetime.fromisoformat(r['eol']).date() >= today]
            if not active:
                return f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –¥–ª—è {name}"
            latest = max(active, key=lambda r: vparse(r['cycle']))
            version = latest['cycle']
            record = latest
        else:
            record = next((r for r in data if r['cycle'] == version), None)
            if not record:
                # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
                available = ', '.join(r['cycle'] for r in data)
                return f"‚ùå –í–µ—Ä—Å–∏—è {version} –¥–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}"
        eol_date = datetime.fromisoformat(record['eol']).date()
        days = (eol_date - today).days
        status = "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if days > 0 else "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        # –°—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
        url = f"https://endoflife.date/{name}"
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        active = [r for r in data if datetime.fromisoformat(r['eol']).date() >= today]
        cycles = sorted([vparse(r['cycle']) for r in active]) if active else []
        minv, maxv = (cycles[0], cycles[-1]) if cycles else (None, None)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        support_info = []
        if 'support' in record and record['support']:
            support_info.append(f"üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ: {record['support']}")
        if 'security' in record and record['security']:
            support_info.append(f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ: {record['security']}")
        return "\n".join([
            f"üì¶ [{name} {version}]({url}):",
            status,
            f"‚è≥ EOL —á–µ—Ä–µ–∑: {days} –¥–Ω–µ–π ({eol_date})",
            *support_info,
            f"üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: {minv} - {maxv}" if minv and maxv else "",
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ compute_info: {e}")
        return L['error'].format(error=str(e))

@dp.message(commands=['start', 'help'])
async def cmd_start(msg: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å."""
    await msg.answer(L['start'].format(bot=(await bot.get_me()).username), disable_web_page_preview=True)

@dp.message(commands=['about'])
async def cmd_about(msg: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ."""
    await msg.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ü–û —á–µ—Ä–µ–∑ https://endoflife.date/\n"
        "–ò—Å—Ö–æ–¥–Ω–∏–∫–∏: https://github.com/endoflife-date/endoflife\n"
        "–ü—Ä–∏–º–µ—Ä—ã: python 3.10, nodejs@18, php v8.2, ubuntu 22.04",
        disable_web_page_preview=True
    )

@dp.message(commands=['latest'])
async def cmd_latest(msg: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    popular = ['python', 'php', 'nodejs', 'ubuntu']
    results = []
    for product in popular:
        data = await fetch_product(product)
        latest = max([vparse(r['cycle']) for r in data])
        results.append(f"{product}: {latest}")
    await msg.answer("\n".join(results))

@dp.message(commands=['search'])
async def cmd_search(msg: types.Message):
    """–ü–æ–∏—Å–∫ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º."""
    query = msg.text.replace('/search', '').strip()
    if not query:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /search")
        return
    slugs = await get_slugs()
    matches = process.extract(query, slugs, limit=5)
    if matches:
        result = "–ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(f"‚Ä¢ {m[0]}" for m in matches)
    else:
        result = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    await msg.answer(result)

@dp.message()
async def on_message(msg: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not msg.text or not msg.text.strip():
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –≤–µ—Ä—Å–∏—é.")
        return
    slugs = await get_slugs()
    parsed = parse_tokens(msg.text, slugs)
    if not parsed:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        matches = process.extract(msg.text, slugs, limit=3)
        if matches:
            hint = "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n" + "\n".join(f"‚Ä¢ {m[0]}" for m in matches)
        else:
            hint = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç."
        await msg.answer(hint)
        return
    resp = []
    for name, ver in parsed:
        resp.append(await compute_info(name, ver))
    await msg.answer("\n\n".join(resp), disable_web_page_preview=True)

@dp.inline_query()
async def on_inline(query: types.InlineQuery):
    """–ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º."""
    slugs = await get_slugs()
    parsed = parse_tokens(query.query, slugs)
    results = []
    for idx, (name, ver) in enumerate(parsed):
        text = await compute_info(name, ver)
        results.append(
            InlineQueryResultArticle(
                id=str(idx),
                title=f"{name} {ver}",
                input_message_content=InputTextMessageContent(text, disable_web_page_preview=True)
            )
        )
    await query.answer(results, cache_time=300)

if __name__ == '__main__':
    asyncio.run(dp.start_polling())