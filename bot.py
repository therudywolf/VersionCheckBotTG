
    import asyncio
    import logging
    from typing import List

    from telegram import (
        InlineQueryResultArticle,
        InputTextMessageContent,
        Update,
    )
    from telegram.constants import ParseMode
    from telegram.ext import (
        ApplicationBuilder,
        CommandHandler,
        MessageHandler,
        InlineQueryHandler,
        ContextTypes,
        filters,
    )

    from config import settings
    from eol_py import Eol
    from parser import parse
    from fuzzy_py import sugg

    logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
    log = logging.getLogger(__name__)

    # Global service instance (reuse underlying aiohttp session)
    svc = Eol()


    # ---------------------------------------------------------------------------#
    # Helper utils
    # ---------------------------------------------------------------------------#
    BULLET_PREFIXES = ("-", "‚Äî", "‚Ä¢")

    def _split_bullets(text: str) -> List[str]:
        """Return list of lines if message looks like a bullet list."""
        lines = [l.strip() for l in text.splitlines() if l.strip()]
        if len(lines) <= 1:
            return []
        if all(any(l.startswith(p) for p in BULLET_PREFIXES) for l in lines):
            # strip prefix
            return [l.lstrip(''.join(BULLET_PREFIXES)).strip() for l in lines]
        return []


    async def _respond_single(u: Update, query: str):
        """Handle a single product query and send a nicely formatted answer."""
        items = parse(query)
        if not items:
            await u.message.reply_text("‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.")
            return

        if len(items) == 1:
            slug, ver = items[0]
            data = await svc.releases(slug)
            if data:
                table = svc.table(slug, data, highlight_version=ver)
                await u.message.reply_markdown(table, disable_web_page_preview=True)
                return

        # Multiple products ‚Äì print a short status line each
        sem = asyncio.Semaphore(settings.MAX_PARALLEL)

        async def job(s, v):
            async with sem:
                return await svc.status_line(s, v)

        lines = await asyncio.gather(*(job(s, v) for s, v in items))
        await u.message.reply_text("\n".join(lines))


    # ---------------------------------------------------------------------------#
    # Command handlers
    # ---------------------------------------------------------------------------#
    async def cmd_start(u: Update, c: ContextTypes.DEFAULT_TYPE):
        text = (
            "*End‚Äëof‚ÄëLife Bot üá∑üá∫*
"
            "–Ø –ø—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏ –≤–µ—Ä—Å–∏–π –ü–û –ø–æ –¥–∞–Ω–Ω—ã–º [endoflife.date](https://endoflife.date/).

"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–æ–¥–µ `nodejs 22, python` ‚Äì –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–∞–±–ª–∏—Ü—É.
"
            "‚Ä¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) —Å –ø–µ—Ä–µ—á–Ω–µ–º ‚Äì –ø—Ä–æ–≤–µ—Ä—é –≤—Å—ë —Å—Ä–∞–∑—É.
"
            "‚Ä¢ –í –∏–Ω–ª–∞–π–Ω‚Äë—Ä–µ–∂–∏–º–µ: `@{username} nodejs` ‚Äì –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä—è–º–æ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ.

"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
"
            "  /start ‚Äì –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
"
            "  /help  ‚Äì –ø–æ–ª–Ω–∞—è –ø–æ–º–æ—â—å"
        ).format(username=c.bot.username)
        await u.message.reply_markdown(text, disable_web_page_preview=True)


    async def cmd_help(u: Update, c: ContextTypes.DEFAULT_TYPE):
        text = (
            "*–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞*

"
            "–ë–æ—Ç –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API https://endoflife.date, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫–∏ "
            "–ø–æ–¥–¥–µ—Ä–∂–∫–∏ (EOL) —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

"
            "üìã *–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞*
"
            "‚Ä¢ `nodejs 20` ‚Äì –ø—Ä–æ–¥—É–∫—Ç + –≤–µ—Ä—Å–∏—è
"
            "‚Ä¢ `python` ‚Äì —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç (–ø–æ–∫–∞–∂—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
"
            "‚Ä¢ `- docker\n- kubernetes\n- postgres` ‚Äì –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫; –≤—ã –ø–æ–ª—É—á–∏—Ç–µ "
            "–æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞.

"
            "üìé –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å *.txt* —Ñ–∞–π–ª —Å –ø–µ—Ä–µ—á–Ω–µ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

"
            "üîé *–ò–Ω–ª–∞–π–Ω‚Äë—Ä–µ–∂–∏–º*
"
            "–í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–±–µ—Ä–∏—Ç–µ `@{username} <–ø—Ä–æ–¥—É–∫—Ç>` ‚Äì –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.

"
            "–ò—Å—Ö–æ–¥–Ω–∏–∫–∏: https://github.com/therudywolf/versionbot"
        ).format(username=c.bot.username)
        await u.message.reply_markdown(text, disable_web_page_preview=True)


    # ---------------------------------------------------------------------------#
    # Message handlers
    # ---------------------------------------------------------------------------#
    async def on_text(u: Update, c: ContextTypes.DEFAULT_TYPE):
        txt = u.message.text or ""
        bullets = _split_bullets(txt)
        if bullets:
            # Process each bullet separately ‚Äì nice when list is long
            for item in bullets:
                await _respond_single(u, item)
            return
        await _respond_single(u, txt)


    async def on_file(u: Update, c: ContextTypes.DEFAULT_TYPE):
        doc = u.message.document
        if doc.mime_type != "text/plain":
            await u.message.reply_text("üìÑ –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã.")
            return
        content = await (await doc.get_file()).download_as_bytes()
        await _respond_single(u, content.decode("utf-8", "ignore"))


    # ---------------------------------------------------------------------------#
    # Inline‚Äëmode
    # ---------------------------------------------------------------------------#
    async def on_inline(u: Update, c: ContextTypes.DEFAULT_TYPE):
        q = u.inline_query.query.strip()
        if not q:
            return

        # Try to parse ‚Äúproduct version‚Äù; fallback to assuming entire query is product
        parsed = parse(q)
        slug, ver = parsed[0] if parsed else (q, None)

        # Autocomplete top 5 closest matches
        products = await svc.products()
        best = sugg(slug, products, n=5)

        results = []
        for idx, s in enumerate(best):
            status = await svc.status_line(s, ver)
            results.append(
                InlineQueryResultArticle(
                    id=str(idx),
                    title=status.split("‚Üí")[0].strip("‚úÖ‚ùå "),
                    description=status,
                    input_message_content=InputTextMessageContent(
                        status, parse_mode=ParseMode.MARKDOWN
                    ),
                )
            )
        await u.inline_query.answer(results, cache_time=60)


    # ---------------------------------------------------------------------------#
    # Bootstrap
    # ---------------------------------------------------------------------------#
    def main():
        if not settings.BOT_TOKEN:
            raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        app = (
            ApplicationBuilder()
            .token(settings.BOT_TOKEN)
            .concurrent_updates(True)
            .build()
        )

        # Register handlers
        app.add_handler(CommandHandler("start", cmd_start))
        app.add_handler(CommandHandler("help", cmd_help))
        app.add_handler(MessageHandler(filters.Document.FileExtension("txt"), on_file))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
        app.add_handler(InlineQueryHandler(on_inline))

        log.info("ü§ñ Bot is running...")
        app.run_polling(close_loop=False)


    if __name__ == "__main__":
        try:
            main()
        finally:
            # Close underlying HTTP session gracefully
            asyncio.run(svc.close())
