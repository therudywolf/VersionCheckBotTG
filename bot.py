import asyncio
import logging
from typing import List, Optional, Tuple

from telegram import InlineQueryResultArticle, InputTextMessageContent, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
    MessageHandler,
    filters,
)

from config import settings
from eol_service import EolService
from parser import parse_query
from fuzzy import find_best

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

eol_service: Optional[EolService] = None

async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π –ü–û (–¥–∞–Ω–Ω—ã–µ endoflife.date).\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:  `python 3.12, nodejs, nginx`\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π inline: `@%s nodejs 20`" % context.bot.username,
        parse_mode='Markdown',
    )

async def on_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/check <—Å–ø–∏—Å–æ–∫> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏–∏\n"
        "/reload ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à slugs\n"
        "Inline —Ä–µ–∂–∏–º: @botname <slug> [–≤–µ—Ä—Å–∏—è]",
    )

async def on_check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    qry = " ".join(context.args)
    await handle_text(update, context, qry)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    if not text.strip():
        await update.message.reply_text("–ù–µ—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å üßê")
        return
    items = parse_query(text)
    if not items:
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return
    tasks = [eol_service.get_status(slug, ver) for slug, ver in items]
    statuses = await asyncio.gather(*tasks)
    await update.message.reply_text("\n".join(statuses))

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_text(update, context, update.message.text or "")

async def on_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if doc.mime_type != "text/plain":
        await update.message.reply_text("–ü–æ–∫–∞ —á–∏—Ç–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ .txt —Ñ–∞–π–ª—ã.")
        return
    file = await doc.get_file()
    content = await file.download_as_bytes()
    await handle_text(update, context, content.decode("utf-8", errors="ignore"))

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.strip()
    if not query:
        return
    items = parse_query(query)
    if not items:
        return
    slug, ver = items[0]
    # find best slugs suggestions
    slugs = await eol_service.list_products()
    matches = find_best(slug, slugs, limit=5)
    results = []
    idx = 0
    for match_slug, score in matches:
        status = await eol_service.get_status(match_slug, ver)
        results.append(
            InlineQueryResultArticle(
                id=f"{idx}",
                title=status.split("‚Üí")[0].strip("üîπ "),
                description=status,
                input_message_content=InputTextMessageContent(status),
            )
        )
        idx += 1
    await update.inline_query.answer(results, cache_time=300, is_personal=False)

async def reload_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await eol_service._ensure_products()
    await update.message.reply_text("–ö—ç—à –ø–µ—Ä–µ—á–Ω—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    log.exception("Unhandled exception: %s", context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("üòî –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    global eol_service
    eol_service = await EolService().__aenter__()

    app = (
        ApplicationBuilder()
        .token(settings.BOT_TOKEN)
        .concurrent_updates(True)
        .build()
    )

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CommandHandler("help", on_help))
    app.add_handler(CommandHandler("check", on_check_command))
    app.add_handler(CommandHandler("reload", reload_cache))
    app.add_handler(MessageHandler(filters.Document.FileExtension("txt"), on_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(InlineQueryHandler(inline_query))
    app.add_error_handler(error_handler)

    log.info("Bot launched")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    # run until Ctrl+C
    await app.updater.idle()
    await app.stop()
    await app.shutdown()
    await eol_service.__aexit__(None, None, None)

if __name__ == "__main__":
    asyncio.run(main())
